import React, {useEffect, useState} from "react";import "./Dashboard.css"import {auth} from "../../firebase";import {useStateValue} from "../../StateProvider";import {useHistory} from "react-router-dom";import AppBar from "../AppBar/AppBar";import {baseURL, withoutHTTPBaseURL} from "../../Constants";function Dashboard(props) {    const history = useHistory()    const [originalURL,setOriginalURL] = useState('')    const [shortenedURL,setShortenedURL] = useState('')    const [message,setMessage] = useState(null)    const [{user},dispatch] = useStateValue()    const [processing,setProcessing] = useState(false)    const createShortenURL = (e)=>{        e.preventDefault()        setProcessing(true)        console.log(shortenedURL,originalURL)        const fetchURL = `${baseURL}/new/url`        fetch(fetchURL, {            method: 'post',            headers: {'Content-Type': 'application/json'},            body: JSON.stringify({                userID: user.uid,                originalUrl: originalURL,                shortenedUrl:shortenedURL            })        })            .then(response => response.json())            .then(data => {                console.log("URL FROM BACKEND", data)                setProcessing(false)                let link = null                if (data.url){                    link = <a target="_blank" rel="noopener noreferrer" href={baseURL+"/"+data?.url}>{withoutHTTPBaseURL+data?.url}</a>                }                setMessage(<span>{data.message}{link}</span>)            })            .catch(err => {                console.log(err)                setProcessing(false)                setMessage("This is error "+err)            })        console.log(shortenedURL,originalURL)    }    useEffect( ()=>{        auth.onAuthStateChanged(authUser=>{            console.log('THE USER IS >>>',authUser)            if (authUser){                dispatch({                    type:"SET_USER",                    user: authUser                })            }else {                history.replace('/register')                dispatch({                    type:"SET_USER",                    user:null                })            }        })        //eslint-disable-next-line    },[])    return(        <div className="dashboard">            <AppBar login={false}/>            <div className="stats">                <div className="stat">                    <div className="total-clicks">                        <h2>0</h2>                        <h3>                            Total Clicks                        </h3>                    </div>                    <div className="create-form">                        <form onSubmit={createShortenURL}>                            <label htmlFor="#shortened-url" className="domain">{withoutHTTPBaseURL}</label>                            <input value={shortenedURL} onChange={e => setShortenedURL(e.target.value)} type="text" id="shortened-url" placeholder="BACKWARD URL"/>                            <textarea value={originalURL} onChange={e => setOriginalURL(e.target.value)} className="block url-input" placeholder="PASTE LONG URL"/>                            <button onClick={createShortenURL} className="create-button">{!processing ? 'CREATE':'GETTING...'}</button>                            {message && <p className="url-message">{message}</p>}                        </form>                    </div>                </div>            </div>        </div>    )}export default Dashboard;